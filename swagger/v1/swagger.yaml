---
openapi: 3.0.1
info:
  title: Grepp API V1
  version: v1
  description: Grepp 플랫폼 API 문서
paths:
  "/api/v1/login":
    post:
      summary: 로그인
      tags:
      - Authentication
      description: 사용자 로그인 및 JWT 토큰 발급
      parameters: []
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/LoginSuccessResponse"
        '401':
          description: 로그인 실패 - 잘못된 자격증명
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/LoginRequest"
  "/api/v1/courses":
    get:
      summary: 코스 목록 조회 (시험 + 수업 통합)
      tags:
      - Courses
      description: 시험과 수업을 통합한 코스 목록을 조회합니다. 검색, 정렬, 필터링을 지원합니다.
      security:
      - bearer_auth: []
      parameters:
      - name: page
        in: query
        description: '페이지 번호 (기본값: 1)'
        required: false
        example: 1
        schema:
          type: integer
      - name: per_page
        in: query
        description: '페이지당 항목 수 (기본값: 20, 최대: 100)'
        required: false
        example: 20
        schema:
          type: integer
      - name: search
        in: query
        description: 시험/수업 제목으로 검색
        required: false
        example: 프로그래밍
        schema:
          type: string
      - name: status
        in: query
        description: "상태별 필터링 (available만 지원):\n * `available` \n "
        required: false
        enum:
        - available
        schema:
          type: string
      - name: sort
        in: query
        description: 정렬 기준 (created=생성일 기준(기본값), popular=인기순)
        required: false
        enum:
        - created
        - popular
        schema:
          type: string
      responses:
        '200':
          description: 코스 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CoursesListResponse"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/tests/{id}/apply":
    post:
      summary: 시험 응시 신청
      tags:
      - Tests
      description: 시험에 응시 신청하고 결제 정보를 저장합니다.
      security:
      - bearer_auth: []
      parameters:
      - name: id
        in: path
        description: 시험 ID
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  example: 45000
                  description: 결제 금액
                payment_method:
                  type: string
                  example: kakaopay
                  description: 결제 방법
              required:
              - amount
              - payment_method
      responses:
        '201':
          description: 응시 신청 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TestApplicationResponse"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '404':
          description: 시험을 찾을 수 없음
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
        '422':
          description: 중복 신청
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/tests":
    get:
      summary: 시험 목록 조회
      tags:
      - Tests
      description: 시험 목록을 조회합니다. 페이지네이션, 검색, 정렬, 필터링을 지원합니다.
      security:
      - bearer_auth: []
      parameters:
      - name: page
        in: query
        description: '페이지 번호 (기본값: 1)'
        required: false
        example: 1
        schema:
          type: integer
      - name: per_page
        in: query
        description: '페이지당 항목 수 (기본값: 20, 최대: 100)'
        required: false
        example: 20
        schema:
          type: integer
      - name: search
        in: query
        description: 시험 제목으로 검색
        required: false
        example: 프로그래밍
        schema:
          type: string
      - name: sort
        in: query
        description: "정렬 기준:\n * `created` \n * `popular` \n * `start_date` \n "
        required: false
        enum:
        - created
        - popular
        - start_date
        example: created
        schema:
          type: string
      - name: status
        in: query
        description: 상태별 필터링
        required: false
        enum:
        - available
        - upcoming
        - past
        example: available
        schema:
          type: string
      responses:
        '200':
          description: 시험 목록 조회 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TestsListResponse"
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
  "/api/v1/users":
    post:
      summary: 회원가입
      tags:
      - Users
      description: 새 사용자 회원가입
      parameters: []
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SuccessResponse"
        '422':
          description: 회원가입 실패 - 이메일 중복
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UserCreateRequest"
servers:
- url: http://localhost:3000
  description: Development server
components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
      required:
      - id
      - email
    UserCreateRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: password123
          required:
          - email
          - password
      required:
      - user
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 회원가입이 완료되었습니다.
        data:
          "$ref": "#/components/schemas/User"
      required:
      - status
      - message
      - data
    LoginRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              example: user@example.com
            password:
              type: string
              example: password123
          required:
          - email
          - password
      required:
      - user
    LoginSuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 로그인이 완료되었습니다.
        data:
          type: object
          properties:
            user:
              "$ref": "#/components/schemas/User"
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          required:
          - user
          - token
      required:
      - status
      - message
      - data
    Test:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: 프로그래밍 기초 시험
        start_date:
          type: string
          format: date-time
          example: '2024-01-15T09:00:00Z'
        end_date:
          type: string
          format: date-time
          example: '2024-01-15T12:00:00Z'
        status:
          type: string
          enum:
          - upcoming
          - available
          - past
          example: available
        enrollment_count:
          type: integer
          example: 25
        created_at:
          type: string
          format: date-time
          example: '2024-01-10T10:00:00Z'
      required:
      - id
      - title
      - start_date
      - end_date
      - status
      - enrollment_count
      - created_at
    TestsListResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 시험 목록 조회가 완료되었습니다.
        data:
          type: object
          properties:
            tests:
              type: array
              items:
                "$ref": "#/components/schemas/Test"
            pagination:
              type: object
              properties:
                current_page:
                  type: integer
                  example: 1
                total_pages:
                  type: integer
                  example: 5
                total_count:
                  type: integer
                  example: 95
                per_page:
                  type: integer
                  example: 20
                has_next_page:
                  type: boolean
                  example: true
                has_prev_page:
                  type: boolean
                  example: false
              required:
              - current_page
              - total_pages
              - total_count
              - per_page
              - has_next_page
              - has_prev_page
          required:
          - tests
          - pagination
      required:
      - status
      - message
      - data
    Course:
      type: object
      properties:
        id:
          type: string
          example: "test_1"
        type:
          type: string
          enum:
          - test
          - course
          example: test
        title:
          type: string
          example: 프로그래밍 기초 시험
        start_date:
          type: string
          format: date-time
          example: '2024-01-15T09:00:00Z'
        end_date:
          type: string
          format: date-time
          example: '2024-01-15T12:00:00Z'
        status:
          type: string
          enum:
          - upcoming
          - available
          - past
          example: available
        enrolled:
          type: boolean
          example: false
        enrollment_count:
          type: integer
          example: 25
        created_at:
          type: string
          format: date-time
          example: '2024-01-10T10:00:00Z'
      required:
      - id
      - type
      - title
      - start_date
      - end_date
      - status
      - enrolled
      - enrollment_count
    TestApplicationResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 시험 응시 신청이 완료되었습니다.
        data:
          type: object
          properties:
            registration_id:
              type: integer
              example: 1
            test_id:
              type: integer
              example: 1
            test_title:
              type: string
              example: 프로그래밍 시험
            payment:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 45000
                payment_method:
                  type: string
                  example: paypal
                status:
                  type: string
                  example: completed
                payment_time:
                  type: string
                  format: date-time
                  example: '2024-01-10T10:00:00Z'
              required:
              - id
              - amount
              - payment_method
              - status
              - payment_time
          required:
          - registration_id
          - test_id
          - test_title
          - payment
      required:
      - status
      - message
      - data
    CoursesListResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: 코스 목록 조회가 완료되었습니다.
        data:
          type: object
          properties:
            courses:
              type: array
              items:
                "$ref": "#/components/schemas/Course"
            pagination:
              type: object
              properties:
                current_page:
                  type: integer
                  example: 1
                total_pages:
                  type: integer
                  example: 5
                total_count:
                  type: integer
                  example: 95
                per_page:
                  type: integer
                  example: 20
                has_next_page:
                  type: boolean
                  example: true
                has_prev_page:
                  type: boolean
                  example: false
              required:
              - current_page
              - total_pages
              - total_count
              - per_page
              - has_next_page
              - has_prev_page
          required:
          - courses
          - pagination
      required:
      - status
      - message
      - data
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: 회원가입에 실패했습니다.
        errors:
          type: array
          items:
            type: string
          example:
          - Email can't be blank
          - Password can't be blank
      required:
      - status
      - message
      - errors
